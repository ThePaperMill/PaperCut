/*


When an interact event happens, the highlight MUST always dissapear. 
one of two events occur:
-the object can no longer be interacted with, 
-the Object can be interacted with again. 


Objects will disconnect from Interact during the middle of talking. They will still be in the array, and highlighted, but will not be able to receive the events. 
if the object is destroyed (especially while being or after being interacted with), it must be destroyed or otherwise set to null, for cleanup.


When you walk next to an object, display a exclamation mark to the closest object, or a small text bubble nearest the closest character instead. 
These should be above that object, not have collision, and not extend past them. 

When you press the interact button, You send an interact event to the object closest to you. 
If that object has not created a text box yet, 
    then delete the current exclamation/text bubble and create a new instance of Textbox at top of screen. 
if that object HAS created a text box, then pass on the interact event to the textbox, which should have it's strings and such stored. 

When you walk past a certain distance, send a "Delete self" call to the textbox at the top of the screen. 


If a player is within a certain distance, a character can "Shout Out" which causes a small text bubble (facing the camera) to appear with words on it. 
It will shrink when the player gets close enough tp scale 0, then delete. it will also shrink after a period of time and can be yelled again. 





GOALS:
-Conversations work 
-When I press enter, new text scrolls on the cardboard 
-when I press enter, new text appears full on the cardboard 
-when I press enter, new text appears on the console. 

-conversation manager has an array of ..."Conversations"
-Each conversation is a COG with an integer that tells when to execute it's code, and a "DO THIS" thing it does when it's number comes up.
-these cogs are children of the ConversationManager object. 
-Conversation "Just Text", on do, traces out it's text. 
-Item-Give, on do, puts an item in teh player's inventory 
-item-take, on do, prompts the player to give an item from the player's inventory. 
-destoy owner, on do, deletes the owner that was running the conversation and ends the conversation 
-end conversation, on do, deletes the space and ends the conversation, then resets the conversation.


Types of conversations: 

Some conversations want to repeat the last thing they said if you walk away 
Some conversations want to start from the beginning (No conversations want to restart from the beginning)
Each conversation 

Talk to someone, they stop talking. Talking to them again has new information -They only have multi convo attached 
Talk to someone, they stop talking. Talking to them again has the same information. -they only have one convo
Talking to someone, player leaves in the middle of talking. Talking to them again prompts a "Why you do that" respone - manager has this. (don't do this) 
Talking to Someone, player leaves AFTEr they ask you for something and don't have it- "Do you have the thing" is repeated until player has the thing. 


*/
class InteractTestPleaseDelete : ZilchComponent
{
    [Property]
    var HudLevel: Level = null; // Level that has our HUD in it
    var HudSpace: Space = null;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, "InteractEvent", this.OnInteract);
        Zero.Connect(this.Owner, "DeInteractEvent", this.OnDeInteract);
    }
    function OnInteract(event : InteractEvent)
    {
        
        // Create a new Space to load our HUD level into
        this.HudSpace = this.GameSession.CreateNamedSpace("HudSpace", Archetype.Find("Space"));
        // Load the HUD level set in the property
        this.HudSpace.LoadLevel(this.HudLevel);
    }
    function OnDeInteract(event : DeInteractEvent)
    {
        if(this.HudSpace != null)
        {
            this.HudSpace.Destroy();
        }
    }
    function Destroyed()
    {
        
        //When should the space be destroyed? When this object is deleted, or the text bubble vanishes. 
        //When does the text bubble vanish? When the player walks outside the reach of the bubble.
        // Make sure to clean up the extra Space we created
        if(this.HudSpace != null)
        {
            this.HudSpace.Destroy();
        }
        
    }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//Interactible is attached to objects that can be interacted with by the player.
class Interactible : ZilchComponent
{
    //InteractibleSizeScalar is how big the bounding box of the collidable detection object is.
    [Property]
    var InteractibleSizeScalar : Real = 1.5;
    
    var IsCurrentlyInteracting : Boolean = false;

    function Initialize(init : CogInitializer)
    {
        //If the levelsettings does not have an interactible manager, add one and print an error message.
        if(this.LevelSettings.InteractibleManager == null)
        {
            this.LevelSettings.AddComponentByName("InteractibleManager");
            Trace("ERROR: LEVELSETTINGS DOES NOT HAVE INTERACTIBLEMANAGERCOMPONENT. Adding to component list");
        }
        //Create a new interactible ghost collider for this object at it's position. if the yplayer touches this, then this object can be interacted with
        var childRigid = this.Space.CreateAtPosition(Archetype.Find("InteractCollider"), this.Owner.Transform.Translation);
        //Increase the size of the bounding box based on property interactiblesize scalar.
        childRigid.SphereCollider.Radius *= this.InteractibleSizeScalar;
        //Tell the new rigidbody to keep track of this object
        childRigid.InteractRigid.SetParent(this.Owner);
        
        Zero.Connect(this.Owner, "InteractEvent", this.OnInteract);
        Zero.Connect(this.Owner, "DeInteractEvent", this.OnDeInteract);
    }
    function OnInteract(event : InteractEvent)
    {
        this.IsCurrentlyInteracting = true;
    }
    function OnDeInteract(event :DeInteractEvent)
    {
        this.IsCurrentlyInteracting = false;
    }
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//InteractRigid is attached to objects that will be created around interactible objects. It should only be attached to an object archetype. 
class InteractRigid : ZilchComponent
{
    //Declare a parent object to keep track of. 
    var ParentObject : Cog = null;

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //If the parent object exists, move to it's position every frame
        if(this.ParentObject != null)
        {
            this.Owner.Transform.Translation = this.ParentObject.Transform.Translation;
        }
    }

    function SetParent(newParent : Cog)
    {
        //Set this object's parent. 
        this.ParentObject = newParent;
    }

    function OnCollisionStarted(event : CollisionEvent)
    {
        //If the object colliding is the player, then add the parent object to the interact manager's array of currently colliding objects. 
        if(event.OtherObject.PlayerController3D != null)
        {
            this.LevelSettings.InteractibleManager.AddInteractibleObject(this.ParentObject);
        }
    }

    function OnCollisionEnded(event : CollisionEvent)
    {
        //If the object no longer colliding is the player, then remove the parent object from the interact mnager's array of currently colliding objects.
        if(event.OtherObject.PlayerController3D != null)
        {
            if(this.LevelSettings != null)
            {
                
                this.LevelSettings.InteractibleManager.RemoveInteractibleObject(this.ParentObject);
            }
        }
        //And send a "Disinteract event" to this object's owner. 
        
    }
}
class InteractibleManager : ZilchComponent
{
    var AllInteractibleObjects : Array[Cog] = Array[Cog]();
    var Player : Cog = null;
    [Property]
    var HighlightArchetype : Archetype = Archetype.Find("HighlightTest");
    var Highlight : Cog = null;
    [Property]
    var HeightOfHighlight : Real = 1.5;
    [Property]
    var EaseSpeed : Real = 0.5;
    var CurrentlyInteractedObject : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        //Store the player object
        this.Player = this.Space.FindObjectByName("Player");
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Space, "InteractEvent", this.OnInteractEvent);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        //If there are objects in the array and there is no highlight object,
        if(this.AllInteractibleObjects.Count > 0 && this.Highlight == null)
        {
            //grab the position of the closest object 
            var player = this.FindClosestObjectToPlayer();
            var pos = player.Transform.Translation;
            pos += Real3(0, this.HeightOfHighlight, 0);
            //create one. 
            this.Highlight = this.Space.CreateAtPosition(this.HighlightArchetype, pos);
        }
        
        //otherwise, If there are no objects in the array and the highlight object exists,
        else if(this.AllInteractibleObjects.Count <= 0 && this.Highlight != null)
        {
            this.Highlight.Destroy();
        }
        //otherwise, interpolate the highlight to it's proper position. 
        else if(this.AllInteractibleObjects.Count > 0)
        {
            var player = this.FindClosestObjectToPlayer();
            var pos = player.Transform.Translation;
            pos += Real3(0, this.HeightOfHighlight, 0);
            
            var grp = Action.Group(this.Owner.Actions as ActionSet);
            Action.Property(grp, @this.Highlight.HighlightController.Position, pos, this.EaseSpeed, Ease.SinOut);
        }
        //if the currently closest object is being interacted with, then hide the icon. 
        var closestobj = this.FindClosestObjectToPlayer();
        if(closestobj != null)
        {
            if(closestobj.Interactible.IsCurrentlyInteracting == true)
            {
                this.Highlight.Model.Visible = false;
            }
            else
            {
                this.Highlight.Model.Visible = true;
            }
        }
        
        //remove all of the null objects
        ValidateCogArray(this.AllInteractibleObjects);
    }
    function OnInteractEvent(event : InteractEvent)
    {
        //find the nearest object
        var closest = this.FindClosestObjectToPlayer();
        
        //If the currently interacted object is not the closest object anymore,
        if(this.CurrentlyInteractedObject != closest && this.CurrentlyInteractedObject != null)
        {
            //then send it a deinteract event before giving the newinteract event
            //Create a ScriptEvent
            var myDeInteractEvent = new DeInteractEvent();
            //Attach all available data
            
            //Dispatch it to owner
            this.CurrentlyInteractedObject.DispatchEvent("DeInteractEvent", myDeInteractEvent);
        }
        
        //Send an interact event to the owner of the closest object.
        
        if(closest != null)
        {
            //Create a ScriptEvent
            var myInteractEvent = new InteractEvent();
            //Dispatch it to owner
            closest.DispatchEvent("InteractEvent", myInteractEvent);
        }
        
        //then make the last dispatched object the new currently interacted
        this.CurrentlyInteractedObject = closest;
    }
    
    function FindClosestObjectToPlayer() : Cog
    {
        var closestCog : Cog = null;
        var obj2 = this.Player.Transform.Translation;
        var bestDist = 10000.0;
        for(var i = 0; i < this.AllInteractibleObjects.Count; ++i)
        {
            var obj = this.AllInteractibleObjects.Get(i);
            var obj1 = obj.Transform.Translation;
            var dist = Math.Distance(obj1, obj2);
            
            if(dist < bestDist)
            {
                bestDist = dist;
                closestCog = obj;
            }
        }
        return closestCog;
    }
    
    function AddInteractibleObject(cog : Cog)
    {
        this.AllInteractibleObjects.Add(cog);
    }
    function RemoveInteractibleObject(cog : Cog)
    {
        //make a new deinteract event
        //Create a ScriptEvent
        var myDeInteractEvent = new DeInteractEvent();
        //Attach all available data
        //Dispatch it to owner
        cog.DispatchEvent("DeInteractEvent", myDeInteractEvent);
        
        for(var i = 0; i < this.AllInteractibleObjects.Count; ++i)
        {
            var obj = this.AllInteractibleObjects.Get(i);
            if(obj == cog)
            {
                //if(this.Highlight != null && obj == this.CurrentHighlightedObject)
                //{
                //    this.Highlight.Destroy();
                //}
                this.AllInteractibleObjects.Set(i, this.AllInteractibleObjects.Get(this.AllInteractibleObjects.LastIndex));
                this.AllInteractibleObjects.RemoveAt(this.AllInteractibleObjects.LastIndex);
                return;
            }
        }
        
        
        
    }
}
class InteractEvent : Event
{
}
class DeInteractEvent : Event
{
}
class HighlightController : ZilchComponent
{
    [Property]
    var Height : Real = 1.5;
    
    var Position : Real3 = Real3(0,0,0);
    [Property]
    var EaseSpeed : Real = 1;
    [Property]
    var EaseType : Ease = Ease.Linear;
    [Property]
    var RotateSpeedDegrees : Real = 40.0;
    
    function Initialize(init : CogInitializer)
    {
        
        //It appears below the position it's supposed to.
        
        this.Position = this.Owner.Transform.Translation;
        this.Owner.Transform.Translation += Real3(0, this.Height, 0);
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        Trace("Work on MAking the HighlightDrop out of the sky");
        //Zero.Connect(this.Owner, Events.on
        
        //Call a function that updates the sequence naturally
        this.UpdateHeight();
    }
    function OnLogicUpdate(event :UpdateEvent)
    {
        this.Owner.Transform.Translation = this.Position + Real3(0, this.Height, 0);
        
        this.Owner.Transform.RotateAnglesWorld(Real3(0,Math.ToRadians(this.RotateSpeedDegrees)*event.Dt,0));
        //this.Owner.Transform.Rotation = Math.ToQuaternion(this.Owner.Transform.EulerAngles);
    }
    function UpdateHeight()
    {
        //declare an action sequence    
        
        var height2 = -this.Height;
        var seq = Action.Sequence(this.Owner.Actions);
        
        Action.Property(seq, @this.Height, height2, this.EaseSpeed, this.EaseType);
        Action.Call(seq, this.UpdateHeight);
    }
}

class ItemHUDCloseEvent : ZilchEvent
{
    var Arctype : Archetype = null;
}
class OpenHUDInConversationsEvent : ZilchEvent
{
}

