class PlayerController3D : ZilchComponent
{
    //reference to the camera the player's movement is based on
    var Cam : Cog = null;
    //The index of the controller the player's movement is based on.
    [Property]
    var GamePadIndex : Integer = 0;
    //Declare a variable "GameController" which references a plugged in GamePad device that GamePadIndex will refer to
    var GameController : Gamepad = null;
    
    var HudLevel: Level = Level.Find("HUDInventory"); // Level that has our HUD in it
    var HudSpace: Space = null;
    
    var ListOfItems : Array[Archetype] =  Array[Archetype]();
    
    var InHUDSpace : Boolean = false;
    var InHUDSpace2 : Boolean = false;

    function Initialize(init : CogInitializer)
    {
        //Find the Gamecontroller
        this.GameController = Zero.Gamepads.GetGamePad(this.GamePadIndex);
        //find the camera 
        this.Cam = this.Space.FindObjectByName("Camera");
        //Connect to logic update
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.GameSession, "ItemHUDCloseEvent", this.OnItemHUDCloseEvent);
        
        
        Trace("delete the next couple of lines after testing ");
        var box = Archetype.Find("CardboardBox");
        var box2 = Archetype.Find("RealBox");
        //this.AddItem(box);
        //this.AddItem(box2);
        //this.AddItem(box);
        //this.AddItem(box2);
        //this.AddItem(box);
    }

    function OnItemHUDCloseEvent(event : ItemHUDCloseEvent)
    {
        if(this.HudSpace != null)
        {
            this.HudSpace.Destroy();
            this.InHUDSpace = false;
        }
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.InHUDSpace == false)
        {
            if(this.InHUDSpace2 == false)
            {
                //move the character using the swept controller and user input
                this.Move(event);
                //Rotate to face the camera
                
                //this.Owner.Transform.Rotation = this.Owner.Orientation.GetLookAtPointRotation(this.Cam.Transform.Translation);
            }
            
            //If the user tries to jump, see if they are next to anything that can be interacted with
            if(Zero.Keyboard.KeyIsDown(Keys.Space) || this.GameController.IsButtonPressed(Buttons.A))
            {
                //if the player is colliding with something, then send an event
                if(this.LevelSettings.InteractibleManager.AllInteractibleObjects.Count > 0)
                {
                    //Create a ScriptEvent
                    var myInteractEvent = new InteractEvent ();
                    //Dispatch it to space
                    this.Space.DispatchEvent("InteractEvent", myInteractEvent);
                }
                //else, if the player is not colliding with a inspectable item/character, then jump
                else
                {
                    this.Owner.SweptController.Jump();
                }
            }
            //If the player lets go of the jump intentionally, jumpcancel
            if(this.GameController.IsButtonReleased(Buttons.A))
            {
                this.Owner.SweptController.JumpCancel();
            }
            
            //If Pause is pressed, bring up the select Hud and PAUSE ALL SPACES
            if(Zero.Keyboard.KeyIsPressed(Keys.Tab) || this.GameController.IsButtonPressed(Buttons.Back))
            {
                this.OpenItemHUD();
            }
        }
    }
    
    function OpenItemHUD()
    {
        // Create a new Space to load our HUD level into
        this.HudSpace = this.GameSession.CreateNamedSpace("ItemInventorySpace", Archetype.Find("Space"));
        // Load the HUD level set in the property
        this.HudSpace.LoadLevel(this.HudLevel);
        this.InHUDSpace = true;
        //("I need to create the items in my inventory right here");
        //Find the Select icon
         var selectIcon = this.HudSpace.FindObjectByName("SelectIcon");
         //Foreach object in my array 
         var counter = 0.0;
         foreach (var arctype in this.ListOfItems)
         {
             //spawn a new object
             var item = this.HudSpace.CreateAtPosition(arctype, Real3(0,0,0));
             item.AttachToRelative(selectIcon);
             item.Transform.Scale = item.Transform.Scale * Real3(0.45, 0.45, 0.45);
             item.Transform.Translation = Real3(counter * 3,-0.95,-3);
             counter = counter + 1;
             this.HudSpace.LevelSettings.ListOfItems.AddItem(item);
         }
         this.HudSpace.LevelSettings.ListOfItems.AssignSpin();
         this.HudSpace.LevelSettings.ListOfItems.SortItems; 
    }

    function Move(event : UpdateEvent)
    {
        //Declare a movement variable to pass to the swept controller
        var movement : Real3 = Real3(0,0,0);
        /*//To use basic movement code, use the following linw
        //movement += Real3(this.GameController.LeftStick.X, 0, -this.GameController.LeftStick.Y);*/
        
        //To base movement on the camera, use this line
        movement += this.Cam.Orientation.WorldForward*this.GameController.LeftStick.Y;
        movement += this.Cam.Orientation.WorldRight*this.GameController.LeftStick.X;
        //Keyboard Controls
        if(Zero.Keyboard.KeyIsDown(Keys.Right))
        {
            //movement += Real3(5, 0, 0);
            movement += this.Cam.Orientation.WorldRight;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.Left))
        {
            //movement += Real3(-5, 0, 0);
            movement -= this.Cam.Orientation.WorldRight;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.Up))
        {
            //movement += Real3(0, 0, -5);
            movement += this.Cam.Orientation.WorldForward;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.Down))
        {
            //movement += Real3(0, 0, 5);
            movement -= this.Cam.Orientation.WorldForward;
        }
        //Call the update function of the swept controller
        this.Owner.SweptController.Update(movement, event.Dt);
    }

    function AddItem(arctype : Archetype)
    {
        this.ListOfItems.Add(arctype);
    }

    function RemoveItem(arctype : Archetype)
    {
        for(var i = 0; i < this.ListOfItems.Count; ++i)
        {
            var obj = this.ListOfItems.Get(i);
            if(obj == arctype)
            {
                this.ListOfItems.Set(i, this.ListOfItems.Get(this.ListOfItems.LastIndex));
                this.ListOfItems.RemoveAt(this.ListOfItems.LastIndex);
                return;
            }
        }
    }
}
